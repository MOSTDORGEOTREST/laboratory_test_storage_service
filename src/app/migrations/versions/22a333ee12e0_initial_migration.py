"""Initial migration

Revision ID: 22a333ee12e0
Revises: 
Create Date: 2024-09-30 11:43:36.887479

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '22a333ee12e0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_samples_borehole_id', table_name='samples')
    op.drop_table('samples')
    op.drop_index('ix_boreholes_object_id', table_name='boreholes')
    op.drop_table('boreholes')
    op.drop_table('parameters_titles')
    op.drop_index('ix_tests_sample_id', table_name='tests')
    op.drop_index('ix_tests_test_type_id', table_name='tests')
    op.drop_index('ix_tests_timestamp', table_name='tests')
    op.drop_table('tests')
    op.drop_table('objects')
    op.drop_index('ix_files_test_id', table_name='files')
    op.drop_table('files')
    op.drop_table('test_types')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('test_types',
    sa.Column('test_type_id', sa.INTEGER(), server_default=sa.text("nextval('test_types_test_type_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('test_type', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('test_type_id', name='test_types_pkey'),
    sa.UniqueConstraint('test_type', name='test_types_test_type_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('files',
    sa.Column('file_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('upload', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('key', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['tests.test_id'], name='files_test_id_fkey'),
    sa.PrimaryKeyConstraint('file_id', name='files_pkey')
    )
    op.create_index('ix_files_test_id', 'files', ['test_id'], unique=False)
    op.create_table('objects',
    sa.Column('object_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False, comment='from EngGeo'),
    sa.Column('object_number', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('object_id', name='objects_pkey'),
    sa.UniqueConstraint('object_number', name='objects_object_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tests',
    sa.Column('test_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('test_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('test_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('test_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.sample_id'], name='tests_sample_id_fkey'),
    sa.ForeignKeyConstraint(['test_type_id'], ['test_types.test_type_id'], name='tests_test_type_id_fkey'),
    sa.PrimaryKeyConstraint('test_id', name='tests_pkey')
    )
    op.create_index('ix_tests_timestamp', 'tests', ['timestamp'], unique=False)
    op.create_index('ix_tests_test_type_id', 'tests', ['test_type_id'], unique=False)
    op.create_index('ix_tests_sample_id', 'tests', ['sample_id'], unique=False)
    op.create_table('parameters_titles',
    sa.Column('param_id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('param_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('param_title', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('param_id', name='parameters_titles_pkey')
    )
    op.create_table('boreholes',
    sa.Column('borehole_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False, comment='from EngGeo'),
    sa.Column('borehole_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('object_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['object_id'], ['objects.object_id'], name='boreholes_object_id_fkey'),
    sa.PrimaryKeyConstraint('borehole_id', name='boreholes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_boreholes_object_id', 'boreholes', ['object_id'], unique=False)
    op.create_table('samples',
    sa.Column('sample_id', sa.VARCHAR(length=32), autoincrement=False, nullable=False, comment='from EngGeo'),
    sa.Column('borehole_id', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('laboratory_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('soil_type', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['borehole_id'], ['boreholes.borehole_id'], name='samples_borehole_id_fkey'),
    sa.PrimaryKeyConstraint('sample_id', name='samples_pkey')
    )
    op.create_index('ix_samples_borehole_id', 'samples', ['borehole_id'], unique=False)
    # ### end Alembic commands ###
